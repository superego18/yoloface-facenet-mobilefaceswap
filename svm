{"cells":[{"cell_type":"markdown","metadata":{"id":"Fc4r7qkMiSk1"},"source":["런타임 유형 변경하기"]},{"cell_type":"markdown","metadata":{"id":"28LbRWjUe4D4"},"source":["# 필요한 것 불러오기"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":31912,"status":"ok","timestamp":1683141309963,"user":{"displayName":"찬주ing","userId":"03178064690276834234"},"user_tz":-540},"id":"YQiRBjXte2-Q","outputId":"b623316d-f7d8-484d-f390-03b472dd7052"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["# Google Drive Mount\n","from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","source":["# yoloface 불러오기\n","!git clone https://github.com/elyha7/yoloface"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TegTlVN3xVQn","executionInfo":{"status":"ok","timestamp":1683141311325,"user_tz":-540,"elapsed":1368,"user":{"displayName":"찬주ing","userId":"03178064690276834234"}},"outputId":"34e451a7-30b7-45c6-ca57-1c628244d769"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Cloning into 'yoloface'...\n","remote: Enumerating objects: 185, done.\u001b[K\n","remote: Counting objects: 100% (83/83), done.\u001b[K\n","remote: Compressing objects: 100% (69/69), done.\u001b[K\n","remote: Total 185 (delta 41), reused 33 (delta 14), pack-reused 102\u001b[K\n","Receiving objects: 100% (185/185), 4.38 MiB | 18.48 MiB/s, done.\n","Resolving deltas: 100% (65/65), done.\n"]}]},{"cell_type":"code","source":["# 디렉터리 이동 후 필요한 패키지 다운 받기\n","%cd /content/yoloface \n","!pip install -r requirements.txt"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AvavKgcMxXsX","executionInfo":{"status":"ok","timestamp":1683141322526,"user_tz":-540,"elapsed":11204,"user":{"displayName":"찬주ing","userId":"03178064690276834234"}},"outputId":"eac309bd-3f15-4923-aa7e-e3f0b52b7927"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["/content/yoloface\n","Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Requirement already satisfied: joblib==1.2.0 in /usr/local/lib/python3.10/dist-packages (from -r requirements.txt (line 1)) (1.2.0)\n","Collecting matplotlib==3.5.1\n","  Downloading matplotlib-3.5.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (11.9 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m11.9/11.9 MB\u001b[0m \u001b[31m60.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: numpy==1.22.4 in /usr/local/lib/python3.10/dist-packages (from -r requirements.txt (line 3)) (1.22.4)\n","Collecting onnx==1.12.0\n","  Downloading onnx-1.12.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (13.1 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m13.1/13.1 MB\u001b[0m \u001b[31m73.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting opencv_python==4.6.0.66\n","  Downloading opencv_python-4.6.0.66-cp36-abi3-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (60.9 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m60.9/60.9 MB\u001b[0m \u001b[31m13.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting pandas==1.4.2\n","  Downloading pandas-1.4.2-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (11.7 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m11.7/11.7 MB\u001b[0m \u001b[31m104.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting Pillow==9.3.0\n","  Downloading Pillow-9.3.0-cp310-cp310-manylinux_2_28_x86_64.whl (3.3 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m3.3/3.3 MB\u001b[0m \u001b[31m110.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: PyYAML==6.0 in /usr/local/lib/python3.10/dist-packages (from -r requirements.txt (line 8)) (6.0)\n","Requirement already satisfied: requests==2.27.1 in /usr/local/lib/python3.10/dist-packages (from -r requirements.txt (line 9)) (2.27.1)\n","Collecting scipy==1.7.3\n","  Downloading scipy-1.7.3-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (39.9 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m39.9/39.9 MB\u001b[0m \u001b[31m17.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting seaborn==0.11.2\n","  Downloading seaborn-0.11.2-py3-none-any.whl (292 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m292.8/292.8 kB\u001b[0m \u001b[31m36.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting setuptools==61.2.0\n","  Downloading setuptools-61.2.0-py3-none-any.whl (1.1 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.1/1.1 MB\u001b[0m \u001b[31m76.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting thop==0.1.1.post2207130030\n","  Downloading thop-0.1.1.post2207130030-py3-none-any.whl (15 kB)\n","\u001b[31mERROR: Ignored the following versions that require a different python version: 1.6.2 Requires-Python >=3.7,<3.10; 1.6.3 Requires-Python >=3.7,<3.10; 1.7.0 Requires-Python >=3.7,<3.10; 1.7.0rc1 Requires-Python >=3.7,<3.10; 1.7.0rc2 Requires-Python >=3.7,<3.10; 1.7.1 Requires-Python >=3.7,<3.10\u001b[0m\u001b[31m\n","\u001b[0m\u001b[31mERROR: Could not find a version that satisfies the requirement torch==1.12.1+cu116 (from versions: 1.11.0, 1.12.0, 1.12.1, 1.13.0, 1.13.1, 2.0.0)\u001b[0m\u001b[31m\n","\u001b[0m\u001b[31mERROR: No matching distribution found for torch==1.12.1+cu116\u001b[0m\u001b[31m\n","\u001b[0m"]}]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":26179,"status":"ok","timestamp":1683141348701,"user":{"displayName":"찬주ing","userId":"03178064690276834234"},"user_tz":-540},"id":"Ehtax5iSfp5i","outputId":"8e582432-fc52-44b5-9f5a-33ecdc401365"},"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Collecting thop\n","  Downloading thop-0.1.1.post2209072238-py3-none-any.whl (15 kB)\n","Requirement already satisfied: torch in /usr/local/lib/python3.10/dist-packages (from thop) (2.0.0+cu118)\n","Requirement already satisfied: typing-extensions in /usr/local/lib/python3.10/dist-packages (from torch->thop) (4.5.0)\n","Requirement already satisfied: jinja2 in /usr/local/lib/python3.10/dist-packages (from torch->thop) (3.1.2)\n","Requirement already satisfied: triton==2.0.0 in /usr/local/lib/python3.10/dist-packages (from torch->thop) (2.0.0)\n","Requirement already satisfied: sympy in /usr/local/lib/python3.10/dist-packages (from torch->thop) (1.11.1)\n","Requirement already satisfied: networkx in /usr/local/lib/python3.10/dist-packages (from torch->thop) (3.1)\n","Requirement already satisfied: filelock in /usr/local/lib/python3.10/dist-packages (from torch->thop) (3.12.0)\n","Requirement already satisfied: lit in /usr/local/lib/python3.10/dist-packages (from triton==2.0.0->torch->thop) (16.0.2)\n","Requirement already satisfied: cmake in /usr/local/lib/python3.10/dist-packages (from triton==2.0.0->torch->thop) (3.25.2)\n","Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.10/dist-packages (from jinja2->torch->thop) (2.1.2)\n","Requirement already satisfied: mpmath>=0.19 in /usr/local/lib/python3.10/dist-packages (from sympy->torch->thop) (1.3.0)\n","Installing collected packages: thop\n","Successfully installed thop-0.1.1.post2209072238\n","Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Collecting facenet_pytorch\n","  Downloading facenet_pytorch-2.5.3-py3-none-any.whl (1.9 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.9/1.9 MB\u001b[0m \u001b[31m48.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: pillow in /usr/local/lib/python3.10/dist-packages (from facenet_pytorch) (8.4.0)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (from facenet_pytorch) (1.22.4)\n","Requirement already satisfied: torchvision in /usr/local/lib/python3.10/dist-packages (from facenet_pytorch) (0.15.1+cu118)\n","Requirement already satisfied: requests in /usr/local/lib/python3.10/dist-packages (from facenet_pytorch) (2.27.1)\n","Requirement already satisfied: urllib3<1.27,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests->facenet_pytorch) (1.26.15)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests->facenet_pytorch) (2022.12.7)\n","Requirement already satisfied: charset-normalizer~=2.0.0 in /usr/local/lib/python3.10/dist-packages (from requests->facenet_pytorch) (2.0.12)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests->facenet_pytorch) (3.4)\n","Requirement already satisfied: torch==2.0.0 in /usr/local/lib/python3.10/dist-packages (from torchvision->facenet_pytorch) (2.0.0+cu118)\n","Requirement already satisfied: networkx in /usr/local/lib/python3.10/dist-packages (from torch==2.0.0->torchvision->facenet_pytorch) (3.1)\n","Requirement already satisfied: jinja2 in /usr/local/lib/python3.10/dist-packages (from torch==2.0.0->torchvision->facenet_pytorch) (3.1.2)\n","Requirement already satisfied: triton==2.0.0 in /usr/local/lib/python3.10/dist-packages (from torch==2.0.0->torchvision->facenet_pytorch) (2.0.0)\n","Requirement already satisfied: sympy in /usr/local/lib/python3.10/dist-packages (from torch==2.0.0->torchvision->facenet_pytorch) (1.11.1)\n","Requirement already satisfied: filelock in /usr/local/lib/python3.10/dist-packages (from torch==2.0.0->torchvision->facenet_pytorch) (3.12.0)\n","Requirement already satisfied: typing-extensions in /usr/local/lib/python3.10/dist-packages (from torch==2.0.0->torchvision->facenet_pytorch) (4.5.0)\n","Requirement already satisfied: cmake in /usr/local/lib/python3.10/dist-packages (from triton==2.0.0->torch==2.0.0->torchvision->facenet_pytorch) (3.25.2)\n","Requirement already satisfied: lit in /usr/local/lib/python3.10/dist-packages (from triton==2.0.0->torch==2.0.0->torchvision->facenet_pytorch) (16.0.2)\n","Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.10/dist-packages (from jinja2->torch==2.0.0->torchvision->facenet_pytorch) (2.1.2)\n","Requirement already satisfied: mpmath>=0.19 in /usr/local/lib/python3.10/dist-packages (from sympy->torch==2.0.0->torchvision->facenet_pytorch) (1.3.0)\n","Installing collected packages: facenet_pytorch\n","Successfully installed facenet_pytorch-2.5.3\n","Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Collecting face_detector\n","  Downloading face_detector-0.4-py3-none-any.whl (9.1 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m9.1/9.1 MB\u001b[0m \u001b[31m30.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting six==1.12.0\n","  Downloading six-1.12.0-py2.py3-none-any.whl (10 kB)\n","Collecting face_detector\n","  Downloading face_detector-0.3-py3-none-any.whl (9.1 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m9.1/9.1 MB\u001b[0m \u001b[31m31.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25h  Downloading face_detector-0.2.9-py3-none-any.whl (9.1 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m9.1/9.1 MB\u001b[0m \u001b[31m33.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25h  Downloading face_detector-0.2.8-py3-none-any.whl (9.1 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m9.1/9.1 MB\u001b[0m \u001b[31m51.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25h  Downloading face_detector-0.2.7-py3-none-any.whl (9.1 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m9.1/9.1 MB\u001b[0m \u001b[31m50.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25h  Downloading face_detector-0.2.6-py3-none-any.whl (9.1 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m9.1/9.1 MB\u001b[0m \u001b[31m70.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25h  Downloading face_detector-0.2.5-py3-none-any.whl (9.1 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m9.1/9.1 MB\u001b[0m \u001b[31m71.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25h  Downloading face_detector-0.2.4-py3-none-any.whl (9.1 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m9.1/9.1 MB\u001b[0m \u001b[31m49.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25h  Downloading face_detector-0.2.3-py3-none-any.whl (9.1 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m9.1/9.1 MB\u001b[0m \u001b[31m68.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25h  Downloading face_detector-0.2.2-py3-none-any.whl (9.1 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m9.1/9.1 MB\u001b[0m \u001b[31m17.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25h  Downloading face_detector-0.2.1-py3-none-any.whl (13 kB)\n","  Downloading face_detector-0.2-py3-none-any.whl (13 kB)\n","Installing collected packages: face_detector\n","Successfully installed face_detector-0.2\n"]}],"source":["# 다른 필요한 애들 다운\n","!pip install thop\n","!pip install facenet_pytorch\n","!pip install face_detector\n","# !pip install face_recognition"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"4xJu112Whusf"},"outputs":[],"source":["# 필요한 애들 불러오기\n","from face_detector import *  # YoloDetector 포함 (yolov5n_state_dict.pt)\n","import numpy as np\n","from PIL import Image\n","import torch \n","import io\n","# import face_recognition\n","import os\n","import glob\n","import cv2\n","from google.colab.patches import cv2_imshow"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":6,"status":"ok","timestamp":1683141353273,"user":{"displayName":"찬주ing","userId":"03178064690276834234"},"user_tz":-540},"id":"RWpWCi2yk3DW","outputId":"adb27c4b-194e-4c1f-897a-9916767619e5"},"outputs":[{"output_type":"stream","name":"stdout","text":["Running on device: cuda:0\n"]}],"source":["device = torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')\n","print('Running on device: {}'.format(device))"]},{"cell_type":"code","source":["yolo = YoloDetector(target_size=720, device =\"cuda:0\", min_face = 50)\n","\n","face_image_list = []\n","test_face_list = []\n","\n","def detection(img, show=False):\n","  bboxes, points = yolo.predict(img)\n","  # crop and align image\n","  faces = yolo.align(img, points[0])\n","\n","  # show pictures\n","  if show == True:\n","    for face in faces:\n","      cv2_imshow(face)\n","\n","  global face_image_list\n","  global test_face_list\n","\n","  for face in faces:\n","    if torch.tensor(face).dim == 1:\n","      continue\n","    face_image_list.append(face)\n","    face = torch.tensor(face)\n","    face = face.unsqueeze(0)\n","    face = face.permute(0, 3, 1, 2)\n","    face = face.float()\n","    face = face.to(device)\n","    test_face_list.append(face)\n","  print('얼굴', len(test_face_list), '장이 얻어짐')"],"metadata":{"id":"317LGWR0X2rN"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":[],"metadata":{"id":"LT_NWFpBX1pV"}},{"cell_type":"code","source":[],"metadata":{"id":"S0BoO5hWXzdw"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"B4yWQ09uigBr"},"source":["# Face Recognition"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"UEu2p6BZmW8h"},"outputs":[],"source":["from facenet_pytorch import InceptionResnetV1"]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":16629,"status":"ok","timestamp":1683141369898,"user":{"displayName":"찬주ing","userId":"03178064690276834234"},"user_tz":-540},"id":"gusSRCcjmN8y","colab":{"base_uri":"https://localhost:8080/","height":49,"referenced_widgets":["e3391d63e6fa4168bf1967f526ce0ba1","d2cd95fbe02747eca82f3741a29936aa","b3b10778a754446d8acb50eba09a70fd","977934e8adda45acb3b8905db77f9e97","700ed00a7ea042b8ba774209999f4973","560c18192bae4a8b919e2285b9f96ee9","75aace66ce864f5fa3a58b2782392efd","6e6715f5b29d43afa6ebcfe3788beea8","e05654f02e1c44f6abdcc2edf77772d2","0e00914324fc493e81231f8195c1143c","c97a553d4ef24c1c86076a6db49d8ed0"]},"outputId":"efcb1dde-221d-4bd7-c996-7d227530776e"},"outputs":[{"output_type":"display_data","data":{"text/plain":["  0%|          | 0.00/107M [00:00<?, ?B/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"e3391d63e6fa4168bf1967f526ce0ba1"}},"metadata":{}}],"source":["resnet = InceptionResnetV1(pretrained='vggface2', device=device).eval()"]},{"cell_type":"markdown","metadata":{"id":"Nz535mbgnw8A"},"source":["\b# Face Embedding Training을 위한 X(임베딩 벡터, train/test) 확보"]},{"cell_type":"code","source":["from torchvision import transforms"],"metadata":{"id":"-j-MXmwS63fg"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"F_-RXEYen2VN"},"outputs":[],"source":["# 이미지 세트에서 임베딩 벡터가 담긴 리스트 얻는 함수\n","\n","# path: 이미지 저장돼있는 폴더\n","# n: 얻을 임베딩 벡터 개수 (이미지는 더 사용될 수 있음)\n","\n","data_transform = transforms.Compose([\n","        transforms.ToTensor(),\n","        transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])])\n","\n","def get_embeddings(path, n=-1):\n","  images_path = path\n","  embeddings_list = []\n","\n","  fail_count = 0 # 실패한 사진 수 측정해보자\n","  num_count = 1 # 몇번째 사진인지 araboza\n","\n","  for file in glob.glob(images_path):\n","\n","    face = cv2.imread(file)\n","    face = torch.tensor(face) # face는 3차원 tensor가 된다\n","    face = face.unsqueeze(0) # face는 4차원이 된다\n","\n","    '''\n","    ### normalize ###\n","    data_transform = transforms.Compose([\n","          transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])])\n","    face = torch.tensor(face) / 255.0 # face는 3차원 tensor가 된다\n","    face = face.permute(2,0,1)\n","    face = face.float()\n","    face = data_transform(face)\n","    face = face.unsqueeze(0) # face는 4차원이 된다 \n","    '''\n","\n","    if face.dim() == 4: # 4차원이면 resnet에 넣자\n","      face = face.permute(0, 3, 1, 2)\n","      face = face.float()\n","      face = face.to(device)  \n","      embedding = resnet(face).detach().cpu()\n","      embeddings_list.append(embedding)\n","      # print(\"임베딩 벡터를 추출하는데 성공한 사진은\", num_count, \"번째 사진!\") # 생각보다 잘 돼서 주석처리\n","      if len(embeddings_list) == n:\n","        break\n","    else:\n","      fail_count += 1\n","    num_count += 1\n","  print(\"임베딩 벡터를 추출하는데 실패한 사진 수:\", fail_count)\n","  print(\"임베딩 벡터에 추출하는데 성공한 사진 수:\", len(embeddings_list))\n","\n","  return embeddings_list\n","\n","# for img in target_images:\n","#   cv2_imshow(img)"]},{"cell_type":"code","source":["# path 설정\n","train_target_path = \"/content/drive/MyDrive/DL_Project/SVM/DLpj/train_target_2_/*.*\"\n","train_celebrities_path = \"/content/drive/MyDrive/DL_Project/SVM/DLpj/train_celebrities/*.*\"\n","test_target_path = \"/content/drive/MyDrive/DL_Project/SVM/DLpj/test_target_2_/*.*\"\n","test_celebrities_path = \"/content/drive/MyDrive/DL_Project/SVM/DLpj/test_celebrities/*.*\"\n","\n","# path_list = [train_target_path, train_celebrities_path, test_target_path, test_celebrities_path]"],"metadata":{"id":"FnJ35W1kdseB"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["tr_t_el = get_embeddings(train_target_path) # train_target_embeddings_list\n","tr_c_el = get_embeddings(train_celebrities_path)\n","te_t_el = get_embeddings(test_target_path)\n","te_c_el = get_embeddings(test_celebrities_path)\n","\n","# 하나의 임베딩은 tensor로 [1,512] 사이즈"],"metadata":{"id":"uIuDn4GGecZa","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1683147687754,"user_tz":-540,"elapsed":107050,"user":{"displayName":"찬주ing","userId":"03178064690276834234"}},"outputId":"2226fac8-d643-484c-99a7-ed8cf77581d8"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["임베딩 벡터를 추출하는데 실패한 사진 수: 0\n","임베딩 벡터에 추출하는데 성공한 사진 수: 1342\n","임베딩 벡터를 추출하는데 실패한 사진 수: 0\n","임베딩 벡터에 추출하는데 성공한 사진 수: 1044\n","임베딩 벡터를 추출하는데 실패한 사진 수: 0\n","임베딩 벡터에 추출하는데 성공한 사진 수: 346\n","임베딩 벡터를 추출하는데 실패한 사진 수: 0\n","임베딩 벡터에 추출하는데 성공한 사진 수: 261\n"]}]},{"cell_type":"code","source":["# train sample balance 맞추기\n","\n","import random\n","\n","num_to_keep = len(tr_c_el)\n","keep_indices = random.sample(range(len(tr_t_el)), num_to_keep)\n","\n","# Create a new list with only the selected elements\n","tr_t_el = [tr_t_el[i] for i in keep_indices]\n","\n","print(len(tr_t_el))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"NZGs1e1dQ1n-","executionInfo":{"status":"ok","timestamp":1683147692716,"user_tz":-540,"elapsed":689,"user":{"displayName":"찬주ing","userId":"03178064690276834234"}},"outputId":"c8134285-96b7-4a00-dec1-7ab1bea72a79"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1044\n"]}]},{"cell_type":"code","source":["# 얼굴 벡터가 들어있는 리스트를 행렬로 만드는 함수\n","\n","def get_matrix(embeddings_list):\n","   combined_tensor = torch.cat(embeddings_list, dim=0)\n","   matrix = combined_tensor.reshape(len(embeddings_list), 512)\n","   return matrix"],"metadata":{"id":"LijNsf5HgKkP"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["np.random.seed(7777) ### 섞는 방법 유지!!\n","\n","# X_train 만들기\n","\n","mat_tr_t_el = get_matrix(tr_t_el)\n","mat_tr_c_el = get_matrix(tr_c_el)\n","\n","X_train = torch.cat([mat_tr_t_el, mat_tr_c_el], dim=0).numpy()\n","\n","# Shuffle the rows\n","np.random.shuffle(X_train)\n","\n","print(X_train.shape)\n","# y_train 만들기\n","y_tr_t_el = torch.ones(mat_tr_t_el.size()[0],1)\n","y_tr_c_el = torch.zeros(mat_tr_c_el.size()[0],1)\n","\n","y_train = torch.cat([y_tr_t_el, y_tr_c_el], dim=0).ravel().numpy()\n","\n","np.random.shuffle(y_train)\n","\n","print(y_train.shape)"],"metadata":{"id":"JYbD8Pn9hJXD","executionInfo":{"status":"ok","timestamp":1683149689152,"user_tz":-540,"elapsed":589,"user":{"displayName":"찬주ing","userId":"03178064690276834234"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"ecd5ecf9-f69f-4e15-cb57-8b0d43b16337"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["(2088, 512)\n","(2088,)\n"]}]},{"cell_type":"code","source":["# X_test 만들기\n","\n","mat_te_t_el = get_matrix(te_t_el)\n","mat_te_c_el = get_matrix(te_c_el)\n","\n","X_test = torch.cat([mat_te_t_el, mat_te_c_el], dim=0).numpy()\n","\n","np.random.shuffle(X_test)\n","\n","print(X_test.shape)\n","\n","# y_test 만들기\n","y_te_t_el = torch.ones(mat_te_t_el.size()[0],1)\n","y_te_c_el = torch.zeros(mat_te_c_el.size()[0],1)\n","\n","y_test = torch.cat([y_te_t_el, y_te_c_el], dim=0).ravel().numpy()\n","\n","np.random.shuffle(y_test)\n","\n","print(y_test.shape)"],"metadata":{"id":"rYezmIxgjBXC","executionInfo":{"status":"ok","timestamp":1683149691024,"user_tz":-540,"elapsed":6,"user":{"displayName":"찬주ing","userId":"03178064690276834234"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"236692e8-77a5-491f-de11-b0b5a2c00ed2"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["(607, 512)\n","(607,)\n"]}]},{"cell_type":"markdown","source":["# PCA (실패)"],"metadata":{"id":"0HCZVGBsijC2"}},{"cell_type":"code","source":["# pca = PCA(n_components=n)\n","\n","from sklearn.decomposition import PCA\n","import matplotlib.pyplot as plt\n","\n","def pca_check(arr): # numpy_array\n","  pca = PCA()\n","  arr_pca = pca.fit_transform(arr)\n","\n","  cumsum = np.cumsum(pca.explained_variance_ratio_)\n","  d = np.argmax(cumsum >= 0.99) + 1 # 설명력 0.99 이상\n","\n","  plt.bar(range(1, arr.shape[1]+1), pca.explained_variance_ratio_, alpha=0.5, align='center')\n","  plt.step(range(1, arr.shape[1]+1), np.cumsum(pca.explained_variance_ratio_), where='mid')\n","  plt.ylabel('Explained variance ratio')\n","  plt.xlabel('Principal components')\n","  plt.show()\n","\n","  print(d,'차원으로 줄이세요')\n","  return d\n","\n","def pca_arr(arr, d):\n","  pca = PCA(n_components=d)\n","  arr_pca_d = pca.fit_transform(arr)\n","  return(arr_pca_d)"],"metadata":{"id":"elKOArawY-Cb"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["dim = pca_check(X_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":469},"id":"jXUFJ7hHZYAI","executionInfo":{"status":"ok","timestamp":1683147707338,"user_tz":-540,"elapsed":1886,"user":{"displayName":"찬주ing","userId":"03178064690276834234"}},"outputId":"593aca06-375b-48d7-baf4-452ea18bbc2d"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"iVBORw0KGgoAAAANSUhEUgAAAjoAAAGyCAYAAADtQ27oAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAAA+qklEQVR4nO3deVyU9f7//+eACIgsg0cRFbdcMHE9ZmqWC4JpZrToaTulHRe09KvkklYumVuLndJMK9OsoyalmbmRSKdFrfy0mk5mLqVSbsC4AQLX749+zmkElQtmGBgf99ttbjeu97XM63rLOTx7X+/ruiyGYRgCAADwQj6eLgAAAMBdCDoAAMBrEXQAAIDXIugAAACvRdABAABei6ADAAC8FkEHAAB4rUqeLsDTCgoKdOTIEQUHB8tisXi6HAAAUAyGYejUqVOqVauWfHwuPW5z1QedI0eOKCoqytNlAACAEvjtt99Up06dS66/6oNOcHCwpD87KiQkxMPVAACA4rDb7YqKinL8Hb+Uqz7oXLhcFRISQtABAKCCudK0EyYjAwAAr0XQAQAAXougAwAAvBZBBwAAeC2CDgAA8FoEHQAA4LUIOgAAwGsRdAAAgNci6AAAAK9F0AEAAF7L40Fn7969SkxMVOvWrVWpUiXFxMQUaz/DMDRr1izVrVtXgYGB6tixo7Zv3+7magEAQEXi8aDz448/at26dWrUqJGuvfbaYu83e/ZsTZ48WaNHj9aHH36oyMhIxcfHa9++fW6sFgAAVCQWwzAMTxZQUFAgH58/89aAAQO0Y8cO7dy587L7ZGdnKyIiQg8//LBmzJghScrNzVWTJk3Uu3dvzZ8/v9jfb7fbFRoaqqysLF7qCQBABVHcv98ef3v5hZBjxtatW2W329W/f39HW+XKlXXHHXdo1apVrizPKxmGoXPn8z1dBgDgKhHo53vFt4y7i8eDTknYbDZJUnR0tFN7s2bN9Ouvv+rcuXMKDAwsct+cnBzl5OQ4lu12u/sKLQcuDjWGIfVbsE270r37vAEA5ceup3qqSmXPRI4KGXQyMjLk7++vgIAAp3ar1SrDMJSRkXHJoDNz5kxNnTq1LMr0KMMwdDY3n1ADALiqVcigUxoTJkxQUlKSY9lutysqKsqDFbnOhdGb4ozaXBsZouTEjvLQSCIA4CoS6Ofrse+ukEHHarUqJydH2dnZTqM6GRkZslgsslqtl9zX399f/v7+ZVFmmbnS6E1RocaT10sBACgrFTLoXJib89NPP6lVq1aOdpvN5niuztWioMBQn7mfXTbgVKlMqAEAXJ0qZNDp1KmTQkJClJyc7Ag658+f16pVq9S7d28PV1c2Lozi9Jn7mfYfP+No/+voDaM2AICrnceDztmzZ7V+/XpJ0sGDB2W32/Xuu+9Kkrp06aLq1asrNjZWBw8e1N69eyVJAQEBmjBhgqZMmaLq1aurRYsWmj9/vk6cOKExY8Z47FzKSlGjOA3+FqQPR3Rm9AYAgL/weNA5evSo+vXr59R2YTktLU1du3ZVfn6+8vLynLYZP368DMPQc889p2PHjql169batGmTGjZsWGa1l7XLjeJ8OKKzfHwIOAAA/JXHn4zsaRXlyciM4gAA8D8V5snIuLKCAkOxc/7LKA4AACYRdMq5i0MOozgAABQfQaccMwzDaT5Og78FKTWpC6M4AAAUk/k3aqLMnDuf75iTQ8gBAMA8gk459tdp4szHAQDAPIJOOXXhLqsLmI4DAIB5BJ1y6OIJyNdGhnj0hWgAAFRUBJ1ypqgJyB+O6MwdVgAAlABBp5w5m8sEZAAAXIWgU44YhqF+C7Y5lpmADABA6RB0ypG/juZcGxmiKpWZlwMAQGkQdMqJi0dzkhM7Mi8HAIBSIuiUE4zmAADgegSdcoDRHAAA3IOgUw4wmgMAgHsQdDyM0RwAANyHoONhf31xJ6M5AAC4FkGnHGE0BwAA1yLolCNkHAAAXIug42GG4ekKAADwXgQdD7p4IjIAAHAtgo4HXTwROdCPicgAALgSQaecYCIyAACuR9DxoL/OzyHjAADgegQdD2F+DgAA7kfQ8RDm5wAA4H4EnXKA+TkAALgHQcdDmJ8DAID7EXQ8gPk5AACUDYKOBzA/BwCAskHQ8TDm5wAA4D4EHQ9gfg4AAGWDoFPGmJ8DAEDZIeiUMebnAABQdgg6HsT8HAAA3Iug40FkHAAA3IugAwAAvBZBp4z99Y4rAADgXgSdMsQdVwAAlC2CThnijisAAMoWQcdDuOMKAAD3I+h4CBkHAAD3I+gAAACvRdApQ9xxBQBA2SLolBHuuAIAoOwRdMoId1wBAFD2CDoewB1XAACUDYKOB5BxAAAoGwQdAADgtQg6AADAaxF0AACA1yLoAAAAr0XQKSM8LBAAgLJH0CkDPCwQAADPIOiUAR4WCACAZxB0yhgPCwQAoOwQdMoYGQcAgLJTLoKOzWZTXFycgoKCVLNmTY0bN065ublX3O/EiRNKTExU3bp1FRQUpJiYGC1YsKAMKgYAABVBJU8XkJGRoe7du6tx48ZatWqVDh8+rKSkJJ09e1bz5s277L79+vWTzWbTjBkzVLduXa1fv17Dhg2Tr6+vBg8eXEZnAAAAyiuPB50FCxbIbrdr9erVCg8PlyTl5eVp+PDhmjhxomrVqlXkfr///rvS0tK0ePFiDRgwQJLUvXt3ffXVV1qxYgVBBwAAeP7S1YYNG9SjRw9HyJGk/v37q6CgQCkpKZfc7/z585Kk0NBQp/bQ0FAZPLQGAACoHAQdm82m6Ohop7awsDBFRkbKZrNdcr+oqCjFx8drxowZ2rVrl06dOqWVK1cqJSVFDz/88CX3y8nJkd1ud/oAAADv5PGgk5GRobCwsELtVqtVJ0+evOy+q1atUkREhJo3b66QkBDde++9euGFF3TnnXdecp+ZM2cqNDTU8YmKiirtKQAAgHLK40GnpAzD0MCBA/Xzzz9r2bJlSktL0/jx4zVq1CitWLHikvtNmDBBWVlZjs9vv/1WhlUDAICy5PHJyFarVVlZWYXaMzIynObtXGzdunVKTk7W999/rxYtWkiSunbtqqNHj+rRRx/V3XffXeR+/v7+8vf3d03xAACgXPP4iE50dHShuThZWVlKT08vNHfnr3bt2iVfX1/FxMQ4tbdp00ZHjhzR2bNn3VIvAACoODwedHr16qXNmzcrMzPT0ZacnCwfHx/Fx8dfcr969eopPz9f33//vVP7//3f/6lGjRqqUqWKu0oGAAAVhMeDTmJiooKDg5WQkKCUlBQtXrxYY8eOVWJiotMzdGJjY9WoUSPHcu/evVW3bl3dddddevvtt5Wamqrx48dryZIlGjFihCdOBQAAlDMlnqOTkZGhL7/8UidPnlR4eLjat28vq9Vq+jhWq1WpqakaMWKEEhISFBwcrEGDBmn69OlO2+Xn5ysvL8+xHBwcrNTUVD3++OMaP368MjMz1aBBA82ZM0ePPPJISU8LAAB4EYth8ul6hmFo/Pjxmjt3rnJychzt/v7+GjlypGbPnu3yIt3JbrcrNDRUWVlZCgkJcct3nM3N07WTNkmSdj3VU1Uqe3wOOAAAFVpx/36bvnQ1Y8YMvfDCC0pKStK3336r9PR0ffvtt0pKStKcOXM0c+bMUhUOAADgKqaHFl5//XU9+eSTmjRpkqMtIiJCLVu2lL+/v1599VVNmDDBpUUCAACUhOkRnfT0dHXq1KnIdR07dlR6enqpiwIAAHAF00Gnfv36WrduXZHr1q9fr/r165e2JgAAAJcwfelq9OjRGjZsmI4dO6a77rpLEREROnr0qJKTk7V8+XK98sor7qgTAADANNNBZ+jQocrNzdW0adO0bNkyWSwWGYah6tWr68UXX9SQIUPcUScAAIBpJbrPecSIEXr44Ydls9kc76Rq2rSpfHw8/vxBAAAAhxI/0MXHx0fXXnutK2sBAABwqWIFnTlz5ui+++5TRESE5syZc9ltLRaLRo8e7ZLiAAAASqNYT0b28fHR9u3b1b59+ytenrJYLMrPz3dZge5WFk9GPpOTp+aTeTIyAACuUty/38X6i1tQUFDkz7gywzDUb8E2T5cBAMBVyfTs4U8++USnT58uct2ZM2f0ySeflLoob3LufL52pdslSddGhijQz9fDFQEAcPUwHXS6deumXbt2FbnOZrOpW7dupS7KWyUndpTFYvF0GQAAXDVMB53LTek5c+aMAgMDS1WQNyPjAABQtoo1R2f79u3aunWrY3nZsmX67LPPnLbJzs7WmjVr1KxZM9dWCAAAUELFCjqbNm3S1KlTJf15V9VLL71UaBs/Pz81a9ZM8+fPd22FAAAAJVSsS1eTJ09WQUGBCgoKZBiGtm/f7li+8MnJydG33357yTebAwAAlDXTD3Th9nIAAFBRlPjJddnZ2dq3b5+ys7MLrWvbtm2pigIAAHAF00EnNzdXw4YN09tvv628vLwit6lIT0YGAADey/Tt5VOnTlVKSoqWLFkiwzA0b948LV68WLGxsapfv77Wrl3rjjoBAABMMx10kpOTNWXKFPXv31+S1L59ez3wwANKSUlR586dCToAAKDcMB10Dh06pCZNmsjX11cBAQHKyMhwrLv//vuVnJzs0gIBAABKynTQiYyMVGZmpiSpQYMG+vjjjx3r9uzZ46q6AAAASs30ZOSuXbvq008/1a233qrBgwdrzJgx2r17typXrqz3339f9957rzvqBAAAMM100Jk+fbqOHz8uSRo1apQMw9C7776rc+fOaeTIkZo0aZLLiwQAACgJU0EnLy9P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+216ROfnn3/WDTfcIF9fX/n6+jqeQxMcHKzx48e77NUQAAAApWU66ISGhjoeuFe7dm3t2rXLsS4/P18nTpxwXXUAAAClYPpaSrt27fT999+rZ8+e6tu3r6ZOnaqCggL5+flp1qxZ6tChgzvqBAAAMM100JkwYYIOHjwoSXrqqad08OBBjRo1SgUFBbruuuu0cOFClxcJAABQEqaDTocOHRyjNmFhYVqzZo3j/VGunswLAABQGi65DYinDRfN3P1sAADA1YoVdEaOHKkxY8aobt26Gjly5GW3tVgsevHFF11SXEVmGIb6Ldjm6TIAALiqFSvorF27Vv/6179Ut25dffDBB05vLL8YQedP587na1f6n7feXxsZokA/Xw9XBADA1adYQWf//v2Onw8cOOCuWrxWcmLHy4ZDAADgHqaeo5Odna2+ffvqk08+cVc9XomMAwCAZ5gKOgEBAfrvf/+r/Px8d9UDAADgMqafjBwfH6+UlBR31AIAAOBSpm8vHzhwoIYOHapTp06pd+/eioiIKDT/pG3bti4rEAAAoKRMB50+ffpIkubPn6/58+c7hRzDMGSxWLi0BQAAygXTQSctLc0ddQAAALic6aDTpUsXd9QBAADgcqYnIwMAAFQUJQo6b731ljp37qwaNWooJCSk0AcAAKA8MB103n77bQ0ePFgxMTE6fvy4+vfvrzvvvFOVK1dWjRo1NGbMGHfUCQAAYJrpoPP888/rySef1MsvvyxJGj58uBYvXqz9+/erevXqqlq1qsuLBAAAKAnTQefnn3/WDTfcIF9fX/n6+spu//PFlcHBwRo/frxeeukllxcJAABQEqaDTmhoqHJyciRJtWvX1q5duxzr8vPzdeLECddVBwAAUAqmby9v166dvv/+e/Xs2VN9+/bV1KlTVVBQID8/P82aNUsdOnRwR50AAACmmQ46EyZM0MGDByVJTz31lA4ePKhRo0apoKBA1113nRYuXOjyIgEAAErCdNDp0KGDY9QmLCxMa9asUU5OjnJycri1HAAAlCum5+i89tprysrKcmrz9/cn5AAAgHLHdNB55JFHFBERob59+2rFihU6d+6cO+oCAAAoNdNB5/fff9fcuXN15swZ3X///apRo4buvfdeffjhh8rLy3NHjQAAACViOuhYrVYNHjxYqampOnTokJ5++mkdOHBAffv2VUREhIYOHeqOOgEAAEwr1Us9a9asqf/3//6ftm7dqo0bNyowMFCvv/66q2oDAAAoFdN3Xf3VoUOHtGLFCq1YsULffPONwsPDNWTIEFfVBgAAUCqmg86xY8eUnJys5cuXa9u2bapSpYoSEhI0bdo0xcXFqVKlUmUnAAAAlzGdSmrVqqVKlSqpd+/eWrFihfr06aOAgAB31AYAAFAqpoPO66+/rttvv53n5gAAgHLPdNB58MEH3VEHAACAy5XqrisAAIDyjKADAAC8FkEHAAB4LYIOAADwWgQdAADgtYp111X37t1NHXTLli0lKgYAAMCVihV0QkJCZLFYHMtfffWVfv/9d7Vq1UoRERH6448/9N133ykyMlLXXXed24oFAAAwo1hB5/3333f8vHTpUv3000/673//q2uuucbRvnfvXvXt21e33Xaby4sEAAAoCdNzdKZNm6Zp06Y5hRxJatSokaZOnapp06a5rDgAAIDSMB10Dh065HQZ668sFosOHz5c6qIAAABcwXTQad++vZ544gnt27fPqX3fvn168skndf3117usOAAAgNIw/a6rhQsXKi4uTk2bNlVMTIxq1Kiho0ePaufOnYqIiNCqVavcUScAAIBppkd0oqOjtXfvXs2dO1dt2rSRj4+P2rRpo7lz52rv3r1q1qyZO+oEAAAwzfSIjiT5+/srMTFRiYmJrq4HAADAZUoUdCRp9+7d2rFjh3777Tc99NBDqlmzpvbu3auIiAgFBwe7skYAAIASMR10zp49q0GDBumdd96Rj4+PCgoKdPPNN6tmzZqaMGGCGjRooGeeecYdtQIAAJhieo7OmDFjtGXLFm3YsEF2u12GYTjW9e7dWxs3bnRpgQAAACVlekTn3Xff1bPPPqv4+Hjl5+c7ratfv74OHDjgqtoAAABKxfSIzunTpxUZGVnkujNnzpS6IAAAAFcxHXRatmyp9957r8h169atU7t27UpdFAAAgCuYvnT15JNP6rbbbtPZs2fVr18/WSwWffnll1q+fLneeOMNrV+/3h11AgAAmGZ6ROeWW27RihUr9NlnnykhIUGGYWj48OF655139J///EexsbHuqBMAAMC0Ej1H56677tJdd92lPXv26Pjx4woPD1d0dLSrawMAACgV0yM6f9WkSRN16tSp1CHHZrMpLi5OQUFBqlmzpsaNG6fc3FxTx/j3v/8ti8Wi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1tVNN92kPXv2mOqD4tQ4duxYTZkyRQMGDNDatWsVHx+vxMTEQqNg58+f14MPPqghQ4bovffe0/nz53XHHXdo0KBBCgwM1MqVK5WQkKDRo0dr69atps/ZTB333XefBgwYoNWrV6tGjRq68847deLECcc2c+bM0aBBg9SzZ0+tXbtW48eP10svvaTHH3+8UB/dd999io+P1/vvv682bdpowIAB2r17tyRp/vz5atOmjW644QZt27ZN27Zt06BBg2S323XLLbcoJCREy5cv1/vvv68hQ4YoMzPT1L8PUO549N3pAC5p8uTJRlBQkHH+/Hnj/Pnzxv79+4077rjDkGRs3LjRMAzDePDBBw1Jxvbt2532TUtLMyQZX331laNNktG+fXun7R588EHjmmuucSxPnDjR8Pf3N/bv33/JuurVq2c8/PDDTseQZKSmpjraMjMzjeDgYOOxxx4r8hj5+fnG+fPnjaZNmxoTJkwodM6Xc6Uajx07Zvj5+RX67nvuuceoXr26kZeX5/guScb69esd26xdu9aQZPzjH/9wtOXl5Rk1atQwRo0aZeqczdaxbt06xzb79+83JBlvvfWWYRiGYbfbjapVqzr1lWEYxiuvvGIEBgYax48fNwzDMBYvXmxIMl5++WXHNqdPnzaqVKliTJs2zdHWpUsX45ZbbnE61ldffWVIMr7//vsi+xWoqBjRAcqxM2fOyM/PT35+fmrQoIHS0tI0b9489ezZ07FNtWrVdP311xfreHFxcU7L1157rQ4dOuRYTk1NVffu3VW/fn1TdYaGhqp79+5Oyz169NAXX3zhaNu9e7duv/12RUREyNfXV35+fvrpp59Mj+hcqcYvvvhC58+fV79+/Zza//GPf+jYsWNO3+fj46PY2FjHcpMmTSRJPXr0cLT5+vrqmmuu0W+//WbqnM3W8dfvrF+/vgIDAx3/Nlu3btXp06fVr18/5eXlOT49evTQuXPntHPnTqfviI+Pd/wcFBSkevXqOf07F+Waa65RSEiIhg0bppUrV+rYsWOX3R6oKAg6QDkWGBior776Sjt27NCBAwd0/PhxPfzww07bREREFPt4YWFhTsuVK1dWTk6OY/niy2LFVb169UJtERERSk9PlySdOnVK8fHxOnjwoObMmaNPP/1UX331lVq1aqXs7GxT33WlGjMyMhzff3E9knTy5ElHW2BgoCpXruxYvvBzUf10cZ1XOufS1HHxdx4/flzSn3fTXQi+fn5+aty4sSQVCmHFqf9iVqtVH330kYKDg/XPf/5TNWvWVNeuXfXDDz9cdj+gvOOuK6Ac8/HxUbt27S67jcVicdn3VatWTUeOHDG9X1H/9f/HH38oMjJSkrRt2zYdOnRIH374oVq1auXYJisrS3Xq1HFpjeHh4ZKko0ePqnbt2k71/HV9aV3pnF1Zx4VtV61apaioqELrGzRoUPzCL6N9+/basGGDzp07p7S0NI0ZM0YJCQn65ZdfXHJ8wBMY0QHg0KNHD23ZskW//vqrqf2ysrIcz/u5sLx582bHJbVz585JktOoxdatW3XgwAGX19i+fXv5+fkpOTnZqX3lypWqUaOG4/JUaV3pnF1ZR8eOHVWlShUdOnRI7dq1K/SpVq2aqdqvNMITGBio3r17a9iwYdq/f7/pUTegPGFEB4DD6NGjtXTpUt1000168skn1bBhQ+3bt0979uzR7NmzL7lfeHi4/vWvf2nq1KkKCwvTrFmzZBiGRo0aJUnq0KGDqlatqocffliPPfaYDh8+rMmTJzuNdLiqxr/97W8aMWKEnn32WQUEBKhDhw5av369li1bprlz58rX17ek3WPqnF1ZR1hYmJ566imNGzdOhw4dUteuXeXr66t9+/ZpzZo1eu+991SlSpViH69Zs2Z68803tXbtWkVGRqpWrVr65ptvtGjRIt1+++2qW7eufv/9d82dO1c33HCDAgICzHYPUG4QdAA4VKtWTZ9//rkmTJigcePG6ezZs6pfv76GDx9+2f0iIyM1e/ZsjR07Vr/88ouaN2+uTZs2OeajREREKDk5WWPGjNFtt92mJk2aaOHChZcNT6Wp8dlnn1VYWJhef/11x3NsFixYoKFDh5r+vpKes6vrePTRR1W7dm3NmTNHc+fOlZ+fn6655hr16dOn0PyeKxk3bpz27t2rBx54QJmZmZo8ebLuuece+fj46PHHH9fRo0dVrVo1xcfHa+bMmaZrBcoTi2EYhqeLAFBxDRgwQDt27Ch05483uxrPGaiomKMDAAC8FkEHAAB4LS5dAQAAr8WIDgAA8FoEHQAA4LUIOgAAwGsRdAAAgNci6AAAAK9F0AEAAF6LoAMAALwWQQcAAHit/w9sxQ8xlu97XQAAAABJRU5ErkJggg==\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["35 차원으로 줄이세요\n"]}]},{"cell_type":"code","source":["X_train = pca_arr(X_train, dim)\n","X_test = pca_arr(X_test, dim)\n","\n","print(X_train.shape)\n","print(X_test.shape)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"PIN9aZ7RZvV3","executionInfo":{"status":"ok","timestamp":1683147710147,"user_tz":-540,"elapsed":662,"user":{"displayName":"찬주ing","userId":"03178064690276834234"}},"outputId":"2a6e0b6e-a770-4cc3-e34c-21d6e4532cd4"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["(2088, 35)\n","(607, 35)\n"]}]},{"cell_type":"markdown","source":["# SVM"],"metadata":{"id":"k6p17Uc8imum"}},{"cell_type":"code","source":["# GPT가 정리해준 SVM 코드 (one-vs-all classification problem)\n","\n","# 필요한 라이브러리 가져오기\n","from numpy import load\n","from sklearn.metrics import accuracy_score\n","from sklearn.preprocessing import Normalizer\n","from sklearn.svm import SVC"],"metadata":{"id":"mYgrwzFEtM5B"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# SVM 분류기를 교육합니다. (하이퍼파라미터 조절, optuna 쓰고)\n","model = SVC(kernel='linear', probability=True)\n","model.fit(X_train, y_train)\n","\n","# 테스트 세트에 대한 예측을 수행합니다. (train set, test set 둘 다 해서 과적합 확인)\n","y_train_hat = model.predict(X_train)\n","y_test_hat = model.predict(X_test)\n","\n","# 모델의 정확도를 계산합니다.\n","score_train = accuracy_score(y_train, y_train_hat)\n","score_test = accuracy_score(y_test, y_test_hat)\n","print('Accuracy: train=%.3f, test=%.3f' % (score_train*100, score_test*100))"],"metadata":{"id":"VxzxF2oDgAwv","executionInfo":{"status":"ok","timestamp":1683149728885,"user_tz":-540,"elapsed":6544,"user":{"displayName":"찬주ing","userId":"03178064690276834234"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"166149a7-d347-489a-ed53-469e86ffe74c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy: train=52.634, test=51.236\n"]}]},{"cell_type":"code","source":["print('----train set---')\n","print('총', len(y_train_hat), '명 중')\n","print('찬주:', np.count_nonzero(y_train_hat == 1))\n","print('누구냐 넌?:', np.count_nonzero(y_train_hat == 0))\n","\n","print('----test set---')\n","print('총', len(y_test_hat), '명 중')\n","print('찬주:', np.count_nonzero(y_test_hat == 1))\n","print('누구냐 넌?:', np.count_nonzero(y_test_hat == 0))"],"metadata":{"id":"9ExtFN5E9e0a","executionInfo":{"status":"ok","timestamp":1683149732150,"user_tz":-540,"elapsed":783,"user":{"displayName":"찬주ing","userId":"03178064690276834234"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"8de61b60-9f45-489e-976b-8bc69780bfc0"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["----train set---\n","총 2088 명 중\n","찬주: 1545\n","누구냐 넌?: 543\n","----test set---\n","총 607 명 중\n","찬주: 474\n","누구냐 넌?: 133\n"]}]},{"cell_type":"code","source":["model.get_params().keys()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"eYslX_q0NUEL","executionInfo":{"status":"ok","timestamp":1683147723769,"user_tz":-540,"elapsed":817,"user":{"displayName":"찬주ing","userId":"03178064690276834234"}},"outputId":"e09ed2ea-370d-4a31-e027-8f5eccac5f41"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["dict_keys(['C', 'break_ties', 'cache_size', 'class_weight', 'coef0', 'decision_function_shape', 'degree', 'gamma', 'kernel', 'max_iter', 'probability', 'random_state', 'shrinking', 'tol', 'verbose'])"]},"metadata":{},"execution_count":299}]},{"cell_type":"code","source":["!pip install optuna"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"SUYRovMxNUth","executionInfo":{"status":"ok","timestamp":1683147732241,"user_tz":-540,"elapsed":6013,"user":{"displayName":"찬주ing","userId":"03178064690276834234"}},"outputId":"bff0dddb-4f39-47ff-b38f-6bd7684f9174"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Requirement already satisfied: optuna in /usr/local/lib/python3.10/dist-packages (3.1.1)\n","Requirement already satisfied: colorlog in /usr/local/lib/python3.10/dist-packages (from optuna) (6.7.0)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (from optuna) (1.22.4)\n","Requirement already satisfied: alembic>=1.5.0 in /usr/local/lib/python3.10/dist-packages (from optuna) (1.10.4)\n","Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from optuna) (23.1)\n","Requirement already satisfied: sqlalchemy>=1.3.0 in /usr/local/lib/python3.10/dist-packages (from optuna) (2.0.10)\n","Requirement already satisfied: tqdm in /usr/local/lib/python3.10/dist-packages (from optuna) (4.65.0)\n","Requirement already satisfied: cmaes>=0.9.1 in /usr/local/lib/python3.10/dist-packages (from optuna) (0.9.1)\n","Requirement already satisfied: PyYAML in /usr/local/lib/python3.10/dist-packages (from optuna) (6.0)\n","Requirement already satisfied: typing-extensions>=4 in /usr/local/lib/python3.10/dist-packages (from alembic>=1.5.0->optuna) (4.5.0)\n","Requirement already satisfied: Mako in /usr/local/lib/python3.10/dist-packages (from alembic>=1.5.0->optuna) (1.2.4)\n","Requirement already satisfied: greenlet!=0.4.17 in /usr/local/lib/python3.10/dist-packages (from sqlalchemy>=1.3.0->optuna) (2.0.2)\n","Requirement already satisfied: MarkupSafe>=0.9.2 in /usr/local/lib/python3.10/dist-packages (from Mako->alembic>=1.5.0->optuna) (2.1.2)\n"]}]},{"cell_type":"code","source":["import optuna\n","from optuna import Trial\n","from sklearn.metrics import f1_score\n","from sklearn.model_selection import cross_val_score"],"metadata":{"id":"lRqyKk_wNYld"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def objective(trial):\n","    # Define hyperparameters to search\n","    params = {\n","        'C': trial.suggest_loguniform('C', 1e-5, 100),\n","        'cache_size': trial.suggest_categorical('cache_size', [200, 400, 600]),\n","        'coef0': trial.suggest_uniform('coef0', -1, 1),\n","        'kernel': trial.suggest_categorical('kernel', ['linear', 'poly', 'rbf', 'sigmoid']),\n","        'max_iter': trial.suggest_int('max_iter', -1, 5000),\n","        'degree': trial.suggest_int('degree', 2, 10),\n","        'gamma': trial.suggest_categorical('gamma', ['scale', 'auto']),\n","        'shrinking': trial.suggest_categorical('shrinking', [True, False]),\n","        'tol': trial.suggest_loguniform('tol', 1e-5, 1e-1),\n","        'verbose': trial.suggest_categorical('verbose', [False, True])\n","    }\n","\n","    # Create SVC model with hyperparameters\n","    model = SVC(**params)\n","\n","    model.fit(X_train, y_train)\n","    \n","    # perform cross-validation\n","    cv_score = cross_val_score(model, X_test, y_test, scoring='accuracy', cv=5)\n","    \n","    print(\"Model Report\")\n","    print(\"accuracy_score:\", np.mean(cv_score))\n","\n","    return np.mean(cv_score)\n","\n","# Define the Optuna study object\n","study = optuna.create_study(direction='maximize')\n","\n","# Optimize the objective function\n","study.optimize(objective, n_trials=100)\n","\n","# Print the best hyperparameters and corresponding objective value\n","print('Best hyperparameters: ', study.best_params)\n","print('Best objective value: ', study.best_value)"],"metadata":{"id":"6ywE89V4NbvQ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["study.best_value"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"X-2v0pwCgVGO","executionInfo":{"status":"ok","timestamp":1683148132144,"user_tz":-540,"elapsed":515,"user":{"displayName":"찬주ing","userId":"03178064690276834234"}},"outputId":"8a877a7a-82e5-498b-8a84-9549efcdbb32"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.5732421081154315"]},"metadata":{},"execution_count":310}]},{"cell_type":"code","source":["# SVM 분류기를 교육합니다. (하이퍼파라미터 조절, optuna 쓰고)\n","model = SVC(**study.best_params)\n","model.fit(X_train, y_train)\n","\n","# 테스트 세트에 대한 예측을 수행합니다. (train set, test set 둘 다 해서 과적합 확인)\n","y_train_hat = model.predict(X_train)\n","y_test_hat = model.predict(X_test)\n","\n","# 모델의 정확도를 계산합니다.\n","score_train = accuracy_score(y_train, y_train_hat)\n","score_test = accuracy_score(y_test, y_test_hat)\n","print('Accuracy: train=%.3f, test=%.3f' % (score_train*100, score_test*100))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0poRczY4VyIv","executionInfo":{"status":"ok","timestamp":1683148148128,"user_tz":-540,"elapsed":1243,"user":{"displayName":"찬주ing","userId":"03178064690276834234"}},"outputId":"5397b234-1d84-4272-c247-3f75d8048274"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy: train=49.473, test=57.990\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/svm/_base.py:299: ConvergenceWarning: Solver terminated early (max_iter=50).  Consider pre-processing your data with StandardScaler or MinMaxScaler.\n","  warnings.warn(\n"]}]},{"cell_type":"code","source":["print('----train set---')\n","print('총', len(y_train_hat), '명 중')\n","print('찬주:', np.count_nonzero(y_train_hat == 1))\n","print('누구냐 넌?:', np.count_nonzero(y_train_hat == 0))\n","\n","print('----test set---')\n","print('총', len(y_test_hat), '명 중')\n","print('찬주:', np.count_nonzero(y_test_hat == 1))\n","print('누구냐 넌?:', np.count_nonzero(y_test_hat == 0))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"f_E0gBPLV9QC","executionInfo":{"status":"ok","timestamp":1683148151504,"user_tz":-540,"elapsed":5,"user":{"displayName":"찬주ing","userId":"03178064690276834234"}},"outputId":"04a80a9f-0350-4a98-fcee-fbb9cd0927fc"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["----train set---\n","총 2088 명 중\n","찬주: 1987\n","누구냐 넌?: 101\n","----test set---\n","총 607 명 중\n","찬주: 577\n","누구냐 넌?: 30\n"]}]},{"cell_type":"markdown","source":["# 이제 실제 사진에 적용해볼 코드를 만들어보자"],"metadata":{"id":"FO2GO8LymElB"}},{"cell_type":"code","source":["# test_path = \"/content/drive/MyDrive/DL_Project/SVM/DLpj/charm_zu/*.*\" # 찬주만 있는 경로\n","# test_path = \"/content/drive/MyDrive/DL_Project/Test/*.*\"\n","test_path = \"/content/drive/MyDrive/DL_Project/Test2/*.*\""],"metadata":{"id":"lBCoSg4umIAy"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["test_images = []\n","\n","for file in glob.glob(test_path):\n","  image_read = cv2.imread(file)\n","  test_images.append(image_read)\n","  # cv2_imshow(image_read) 너무 오래 걸림 (얼굴이 아니라 전체 사진이라 화질이 커서)\n","print('test image가', len(test_images), '장 추가됨!')"],"metadata":{"id":"qyd-pcJgmWUO","executionInfo":{"status":"ok","timestamp":1683148176761,"user_tz":-540,"elapsed":16152,"user":{"displayName":"찬주ing","userId":"03178064690276834234"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"387c50d6-c094-4892-a096-f47229542efc"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["test image가 53 장 추가됨!\n"]}]},{"cell_type":"code","source":["# detection 함수 정의\n","yolo = YoloDetector(target_size = 720, device = \"cuda:0\",min_face = 50)\n","\n","face_image_list = []\n","test_face_list = []\n","\n","def detection(img, show=False):\n","  bboxes, points = yolo.predict(img)\n","  # crop and align image\n","  faces = yolo.align(img, points[0])\n","\n","  # show pictures\n","  if show == True:\n","    for face in faces:\n","      cv2_imshow(face)\n","\n","  global face_image_list\n","  global test_face_list\n","\n","  for face in faces:\n","    if torch.tensor(face).dim == 1:\n","      continue\n","    face_image_list.append(face)\n","    face = torch.tensor(face)\n","    face = face.unsqueeze(0)\n","    face = face.permute(0, 3, 1, 2)\n","    face = face.float()\n","    face = face.to(device)\n","    test_face_list.append(face)\n","  print('얼굴', len(test_face_list), '장이 얻어짐')"],"metadata":{"id":"hSWX3jeQnTT9","executionInfo":{"status":"ok","timestamp":1683148176762,"user_tz":-540,"elapsed":5,"user":{"displayName":"찬주ing","userId":"03178064690276834234"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"32895b46-b67e-46a0-ecf7-7f59abb4887f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["cuda:0\n","/content/yoloface/weights/yolov5n_state_dict.pt\n"]}]},{"cell_type":"code","source":["for img in test_images:\n","  detection(img)"],"metadata":{"id":"nviTtZIioBos","executionInfo":{"status":"ok","timestamp":1683148180387,"user_tz":-540,"elapsed":3628,"user":{"displayName":"찬주ing","userId":"03178064690276834234"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"0476b8f6-e6bf-43bd-f662-b5139a48b7a3"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["WARNING: --img-size 1759 must be multiple of max stride 32, updating to 1760\n","얼굴 4 장이 얻어짐\n","WARNING: --img-size 1759 must be multiple of max stride 32, updating to 1760\n","얼굴 6 장이 얻어짐\n","WARNING: --img-size 1759 must be multiple of max stride 32, updating to 1760\n","얼굴 10 장이 얻어짐\n","WARNING: --img-size 1759 must be multiple of max stride 32, updating to 1760\n","얼굴 14 장이 얻어짐\n","WARNING: --img-size 1759 must be multiple of max stride 32, updating to 1760\n","얼굴 18 장이 얻어짐\n","WARNING: --img-size 1759 must be multiple of max stride 32, updating to 1760\n","얼굴 21 장이 얻어짐\n","얼굴 23 장이 얻어짐\n","얼굴 25 장이 얻어짐\n","WARNING: --img-size 1759 must be multiple of max stride 32, updating to 1760\n","얼굴 29 장이 얻어짐\n","얼굴 30 장이 얻어짐\n","WARNING: --img-size 1558 must be multiple of max stride 32, updating to 1568\n","얼굴 37 장이 얻어짐\n","얼굴 40 장이 얻어짐\n","WARNING: --img-size 1558 must be multiple of max stride 32, updating to 1568\n","얼굴 47 장이 얻어짐\n","얼굴 52 장이 얻어짐\n","WARNING: --img-size 1046 must be multiple of max stride 32, updating to 1056\n","얼굴 54 장이 얻어짐\n","WARNING: --img-size 1080 must be multiple of max stride 32, updating to 1088\n","얼굴 66 장이 얻어짐\n","얼굴 67 장이 얻어짐\n","얼굴 68 장이 얻어짐\n","얼굴 69 장이 얻어짐\n","얼굴 75 장이 얻어짐\n","얼굴 81 장이 얻어짐\n","얼굴 87 장이 얻어짐\n","얼굴 92 장이 얻어짐\n","WARNING: --img-size 1558 must be multiple of max stride 32, updating to 1568\n","얼굴 97 장이 얻어짐\n","얼굴 103 장이 얻어짐\n","얼굴 111 장이 얻어짐\n","얼굴 113 장이 얻어짐\n","얼굴 121 장이 얻어짐\n","WARNING: --img-size 1355 must be multiple of max stride 32, updating to 1376\n","얼굴 123 장이 얻어짐\n","WARNING: --img-size 1224 must be multiple of max stride 32, updating to 1248\n","얼굴 129 장이 얻어짐\n","얼굴 131 장이 얻어짐\n","얼굴 140 장이 얻어짐\n","얼굴 142 장이 얻어짐\n","WARNING: --img-size 1759 must be multiple of max stride 32, updating to 1760\n","얼굴 146 장이 얻어짐\n","얼굴 148 장이 얻어짐\n","얼굴 150 장이 얻어짐\n","WARNING: --img-size 1269 must be multiple of max stride 32, updating to 1280\n","얼굴 181 장이 얻어짐\n","WARNING: --img-size 1214 must be multiple of max stride 32, updating to 1216\n","얼굴 213 장이 얻어짐\n","얼굴 244 장이 얻어짐\n","얼굴 244 장이 얻어짐\n","WARNING: --img-size 1558 must be multiple of max stride 32, updating to 1568\n","얼굴 245 장이 얻어짐\n","얼굴 258 장이 얻어짐\n","얼굴 271 장이 얻어짐\n","WARNING: --img-size 1009 must be multiple of max stride 32, updating to 1024\n","얼굴 308 장이 얻어짐\n","얼굴 321 장이 얻어짐\n","WARNING: --img-size 1044 must be multiple of max stride 32, updating to 1056\n","얼굴 356 장이 얻어짐\n","WARNING: --img-size 1558 must be multiple of max stride 32, updating to 1568\n","얼굴 362 장이 얻어짐\n","얼굴 366 장이 얻어짐\n","얼굴 368 장이 얻어짐\n","얼굴 370 장이 얻어짐\n","얼굴 372 장이 얻어짐\n","얼굴 372 장이 얻어짐\n","WARNING: --img-size 879 must be multiple of max stride 32, updating to 896\n","얼굴 385 장이 얻어짐\n"]}]},{"cell_type":"code","source":["# 이미지 세트에서 임베딩 벡터가 담긴 리스트 얻는 함수\n","\n","def get_embeddings(faces_list):\n","  embeddings_list = []\n","\n","  fail_count = 0 # 실패한 사진 수 측정해보자\n","  num_count = 1 # 몇번째 사진인지 araboza\n","\n","  for face in faces_list:\n","    if face.dim() == 4: # 4차원이면 resnet에 넣자\n","      embedding = resnet(face).detach().cpu()\n","      embeddings_list.append(embedding)\n","      # print(\"임베딩 벡터를 추출하는데 성공한 사진은\", num_count, \"번째 사진!\") # 생각보다 잘 돼서 주석처리\n","    else:\n","      fail_count += 1\n","    num_count += 1\n","  print(\"임베딩 벡터를 추출하는데 실패한 사진 수:\", fail_count)\n","  print(\"임베딩 벡터에 추출하는데 성공한 사진 수:\", len(embeddings_list))\n","\n","  return embeddings_list"],"metadata":{"id":"XUwIgIZuouDw"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["embeddings_list_ = get_embeddings(test_face_list)"],"metadata":{"id":"3MabY1tTpnNx","executionInfo":{"status":"ok","timestamp":1683149758451,"user_tz":-540,"elapsed":11800,"user":{"displayName":"찬주ing","userId":"03178064690276834234"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"17f11a30-e5c4-49f9-d297-50125c2b685e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["임베딩 벡터를 추출하는데 실패한 사진 수: 0\n","임베딩 벡터에 추출하는데 성공한 사진 수: 385\n"]}]},{"cell_type":"code","source":["aa = get_matrix(embeddings_list_).numpy()\n","\n","aa = pca_arr(aa, dim)\n","print(aa.shape)\n","\n","aa[[0]]"],"metadata":{"id":"dW-SPDpedkyQ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["charmzu = 0\n","\n","for i in range(len(embeddings_list_)): # embeding 개수가 face랑 같게 얻어지면\n","  result = model.predict(embeddings_list_[i].numpy())\n","  # result = model.predict(aa[[i]]) # PCA할 때\n","  cv2_imshow(face_image_list[i])\n","  if result == 1.0:\n","    print('찬주')\n","    charmzu += 1\n","  else:\n","    print(\"누구냐 넌?\")"],"metadata":{"id":"pl9mLe9Rp6gF","executionInfo":{"status":"ok","timestamp":1683149816242,"user_tz":-540,"elapsed":54622,"user":{"displayName":"찬주ing","userId":"03178064690276834234"}},"colab":{"base_uri":"https://localhost:8080/","height":1000,"output_embedded_package_id":"1cAuEwy5OeOSIFC41FKEp13SuL0Oqn6cK"},"outputId":"93872358-5f83-4c68-c7cf-6dd8e6cda0cc"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":"Output hidden; open in https://colab.research.google.com to view."},"metadata":{}}]},{"cell_type":"code","source":["print('charmzu', charmzu, '명 발견!')"],"metadata":{"id":"XOl9d1Ht5LQ9","executionInfo":{"status":"ok","timestamp":1683149237049,"user_tz":-540,"elapsed":14,"user":{"displayName":"찬주ing","userId":"03178064690276834234"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"540b8c23-54a6-4679-f588-8aa31af02143"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["charmzu 379 명 발견!\n"]}]},{"cell_type":"markdown","source":["# 결과 분석"],"metadata":{"id":"QLKR674FYb6Q"}},{"cell_type":"code","source":["# tr_t_el, tr_t_cl의 임베딩 벡터 간 유클리디안 거리 측정\n","\n","distance_1 = []\n","distance_2 = []\n","distance_3 = []\n","\n","for i in range(len(tr_t_el)):\n","  for j in range(i+1, len(tr_t_el)):\n","    distance = round(np.linalg.norm(tr_t_el[i]-tr_t_el[j]), 2)\n","    distance_1.append(distance)\n","\n","for i in range(len(tr_c_el)):\n","  for j in range(i+1, len(tr_c_el)):\n","    distance = round(np.linalg.norm(tr_c_el[i]-tr_c_el[j]), 2)\n","    distance_2.append(distance)\n","\n","for i in range(len(tr_t_el)):\n","  for j in range(len(tr_c_el)):\n","    distance = round(np.linalg.norm(tr_t_el[i]-tr_c_el[j]), 2)\n","    distance_3.append(distance)"],"metadata":{"id":"7D9fgHuoYaSl"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(len(distance_1))\n","print(len(distance_2))\n","print(len(distance_3))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lgNHIgN8Y_XR","executionInfo":{"status":"ok","timestamp":1683145438325,"user_tz":-540,"elapsed":23,"user":{"displayName":"찬주ing","userId":"03178064690276834234"}},"outputId":"4e39a139-a507-4aef-dd5b-da559eeba3af"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["544446\n","544446\n","1089936\n"]}]},{"cell_type":"code","source":["%matplotlib inline"],"metadata":{"id":"jAKoimeddgQ-"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","\n","plt.hist(distance_1, bins=100)\n","\n","# Set the title and labels\n","plt.title('Euclidean Distance between Target Embedding Vector')\n","plt.xlabel('Distance')\n","plt.ylabel('Frequency')\n","\n","# Show the plot\n","plt.show()\n","\n","print('평균:', np.mean(distance_1))\n","print('표준편차:', np.std(distance_1))"],"metadata":{"id":"ZE8vmmp0ZVWU"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["plt.hist(distance_2, bins=100)\n","\n","# Set the title and labels\n","plt.title('Euclidean Distance between Celebrities Embedding Vector')\n","plt.xlabel('Distance')\n","plt.ylabel('Frequency')\n","\n","# Show the plot\n","plt.show()\n","\n","print('평균:', np.mean(distance_2))\n","print('표준편차:', np.std(distance_2))"],"metadata":{"id":"xgABvH6mb2nr"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["plt.hist(distance_3, bins=100)\n","\n","# Set the title and labels\n","plt.title('Euclidean Distance between Target and Celebrities')\n","plt.xlabel('Distance')\n","plt.ylabel('Frequency')\n","\n","# Show the plot\n","plt.show()\n","\n","print('평균:', np.mean(distance_3))\n","print('표준편차:', np.std(distance_3))"],"metadata":{"id":"uwPltvgoefRj"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"EddTYnigenBc"},"execution_count":null,"outputs":[]}],"metadata":{"accelerator":"GPU","colab":{"provenance":[{"file_id":"1kqYWUmcKxpk_KFjrzNj6Eai0zasrZEHF","timestamp":1683092677777}]},"gpuClass":"standard","kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"},"widgets":{"application/vnd.jupyter.widget-state+json":{"e3391d63e6fa4168bf1967f526ce0ba1":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_d2cd95fbe02747eca82f3741a29936aa","IPY_MODEL_b3b10778a754446d8acb50eba09a70fd","IPY_MODEL_977934e8adda45acb3b8905db77f9e97"],"layout":"IPY_MODEL_700ed00a7ea042b8ba774209999f4973"}},"d2cd95fbe02747eca82f3741a29936aa":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_560c18192bae4a8b919e2285b9f96ee9","placeholder":"​","style":"IPY_MODEL_75aace66ce864f5fa3a58b2782392efd","value":"100%"}},"b3b10778a754446d8acb50eba09a70fd":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_6e6715f5b29d43afa6ebcfe3788beea8","max":111898327,"min":0,"orientation":"horizontal","style":"IPY_MODEL_e05654f02e1c44f6abdcc2edf77772d2","value":111898327}},"977934e8adda45acb3b8905db77f9e97":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_0e00914324fc493e81231f8195c1143c","placeholder":"​","style":"IPY_MODEL_c97a553d4ef24c1c86076a6db49d8ed0","value":" 107M/107M [00:06&lt;00:00, 23.9MB/s]"}},"700ed00a7ea042b8ba774209999f4973":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"560c18192bae4a8b919e2285b9f96ee9":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"75aace66ce864f5fa3a58b2782392efd":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"6e6715f5b29d43afa6ebcfe3788beea8":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"e05654f02e1c44f6abdcc2edf77772d2":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"0e00914324fc493e81231f8195c1143c":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"c97a553d4ef24c1c86076a6db49d8ed0":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}}}}},"nbformat":4,"nbformat_minor":0}